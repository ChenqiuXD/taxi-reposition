import sys
import os
sys.path.append(os.getcwd())   # Added so as to use codes from rl_algo package in the parent dir
sys.path.append(os.getcwd()+"\\transition_model")
sys.path.append(os.getcwd()+"\\rl_algo")

import torch
import numpy as np
from env_runner import EnvRunner
from rl_algo.utils.config import get_config
from make_sumo_env import make_sumo_env


def parse_args(args, parser):
    parser.add_argument('--epsilon', type=int, default=0.9,
                        help="Epsilon greedy")
    parser.add_argument('--generate_sample', type=int, default=1,
                        help="How many samples would be generated by transition model in model-based RL")
    parser.add_argument('--train', action="store_false", default=True, help='Training or evaluation')
    parser.add_argument('--render', action="store_false", default=True, help='Render or not')
    parser.add_argument('--continue_training', action="store_true", default=False, help='Whether load last iteration and continue training')
    all_args = parser.parse_known_args(args)[0]
    return all_args


def main(args):
    # Parse args
    parser = get_config()
    all_args = parse_args(args, parser)
    all_args.device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
    print("Current using ", all_args.device)
    print("Render is ", all_args.render)

    # set seeds
    torch.manual_seed(all_args.seed)
    torch.cuda.manual_seed_all(all_args.seed)
    np.random.seed(all_args.seed)

    # create env
    env = make_sumo_env(all_args)

    # Choose algorithm to use
    if all_args.algorithm_name in ['null', 'random', 'heuristic', 'q_learning', 'iql', 'vdn',
                                   "mvdn" , "mq_learning", 'adp_vdn']:
        print("Using policy: ", all_args.algorithm_name)
        runner = EnvRunner(all_args, env)
    else:
        raise NotImplementedError("ERROR: algorithm not implemented. Possible policies: qmix, vdn, iql")

    # Train the agent
    reward_result_list = []
    if all_args.train:  # for training agents
        if all_args.continue_training:  # Load env data and agent's parameters
            try:
                # !!!!!! PLEASE change the "last_step_cnt" variable in env_runner.py, the 'restore' function
                #  so that the runner.restore() can find file. 
                runner.restore()
            except:
                print("Unable to restore, try training from scratch")
        total_num_steps = 0
        
        # Training
        runner.warmup() # warmup to fill the buffer
        try:
            while total_num_steps < all_args.num_env_steps:
                reward_list = runner.run()  # Run an episode
                total_num_steps += 1
                print("---------------------------------------------------------------------------------------------------")
                print("At episode ", total_num_steps, " reward sum is: ", np.sum([reward_list[i][-1] for i in range(len(reward_list))]))
                print("---------------------------------------------------------------------------------------------------\n\n\n")
                reward_result_list.append(np.sum(reward_list))
            runner.store_data() # Save network parameters and env data
        except KeyboardInterrupt:
            print("Early stopping, saving data")
            runner.store_data()
    else:   # for evaluating agents
        runner.restore(isEval=True)
        reward_result_list = np.zeros(all_args.num_env_steps)
        for i in range(all_args.num_env_steps):
            reward_list = runner.eval()
            reward_result_list[i] = np.mean(reward_list)
            print("During evaluation iteration ", str(i), " the mean reward is: ", np.mean(reward_list))
        print("Final result: the average mean reward over ", all_args.num_env_steps, " is ", np.mean(reward_result_list))


if __name__ == "__main__":
    # Options: null, random, heuristic, q_learning, vdn, q_mix, mvdn, mq_learning, q_gnn, adp_vdn
    algo = 'q_learning'

    # For eval
    # input_args = ['--algorithm_name', algo, '--seed', '50', '--episode_length', '100',
    #               '--num_env_steps', '20', '--train']

    # For train
        # Before you run the code, please pay attention to the following cautions:
        # 1 If you need to continue traning, please change the last_step_cnt in env_runner.py the restore function
        # 2 If you need to continue traning, please rename the saved pkl network parameters in the model directory

    # input_args = ['--algorithm_name', algo, '--seed', '1', '--episode_length', '1', '--lr', '1e-4', '--buffer_size', '8', '--batch_size', '4', 
    #                 '--hard_update_interval', '10', '--num_env_steps', '600', '--generate_sample', '3', '--render', '--continue_training']
    input_args = ['--algorithm_name', algo, '--seed', '11', '--episode_length', '6', '--lr', '1e-4', '--buffer_size', '256',
                  '--batch_size', '64', '--hard_update_interval', '60', '--num_env_steps', '900',
                  '--render']

    # Check if there are input from system, then run the main function.
    if sys.argv[1:]:
        main(sys.argv[1:])
    else:
        main(input_args)
